{"version":3,"sources":["docs/components/table/VTableWithWidget.tsx"],"names":["dropDown","column","widget","type","dropdownCell","options","index","value","label","filterable","colorCell","row","backgroundColor","color","printColor","colorWidget","checkboxWidget","editWidget","datetimeWidget","dateTimeCell","icon","customerwidget","cusmtomerCell","renderCustomer","infoSelection","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","style","textAlign","_blueprintjs_core__WEBPACK_IMPORTED_MODULE_6__","iconSize","intent","width","widgetsCell","VTableWithWidgetDoc","props","_this","Object","_var_www_html_gsi_ux_docs_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","_var_www_html_gsi_ux_docs_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_var_www_html_gsi_ux_docs_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","doSomethingAwesomeWithTheValue","console","log","handleFilter","value1","value2","toggleFilterColumn","setState","filterColumn","state","renderTooltip","columnName","concat","handleChangeType","e","target","typeSelection","onSave","data","handleChangeColor","changeColor","onSort","changeData","colorFiltered","getData","changeColumn","columns","addColumn","handleDeleteSelection","clearSelection","name","dropdown","other","fecha","checkbox","sinEditar","customer","filter","x","undefined","_this2","Fragment","gsi_ui__WEBPACK_IMPORTED_MODULE_8__","striped","selectionStyle","borderColor","borderRadius","allowTableTotals","totalsConf","count","totals","average","columnWidths","onSelectionChange","actionsSelection","onSelectionCleaned","onDoubleClick","rowIndex","columnIndex","filterByColumn","filterType","edit","editColumn","resultDataEdited","invalidDataMessage","invalidColumns","showToastNotification","message","join","timeout","editToolbar","textSave","textCancel","iconCancel","iconEdit","iconSave","cellSelectionType","onOrderColumns","columns_name","reordering","sortable","setupsOrden","order","textAlignColumn","configColumnsHeader","textColor","typeHeightRow","enableColumnResizing","toolbar","height","_blueprintjs_core__WEBPACK_IMPORTED_MODULE_7__","minimal","text","onClick","footer","tooltips","onChange","positionTooltips","Component"],"mappings":"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","file":"static/js/3.a5f94401.chunk.js","sourcesContent":["import React, { Component, ReactNode } from 'react';\nimport { Button, Icon } from '@blueprintjs/core';\nimport {\n  CellSelectionType,\n  InfoSelection,\n  IVWidgetTableProps,\n  showToastNotification,\n  VTable\n} from 'gsi-ui';\n\nexport const dropDown: IVWidgetTableProps = {\n  column: 'dropdown',\n  widget: {\n    type: 'DROPDOWN',\n    dropdownCell: {\n      options: [\n        { index: 1, value: 4, label: 'otro' },\n        { index: 2, value: 3, label: 'Lastname7' },\n        { index: 3, value: 2, label: 'lucia alvares' },\n        { index: 4, value: 1, label: 'jajajojo jujuju' }\n      ],\n      filterable: true\n    },\n    colorCell: {\n      column: 'dropdown',\n      row: 1,\n      backgroundColor: 'blue',\n      color: 'white',\n      printColor: () => {\n        return true;\n      }\n    }\n  }\n};\n\nexport const colorWidget: IVWidgetTableProps = {\n  row: 1,\n  widget: {\n    type: 'COLOR',\n    colorCell: {\n      backgroundColor: 'orange',\n      color: 'white',\n      printColor: () => {\n        return true;\n      }\n    }\n  }\n};\n\nexport const checkboxWidget: IVWidgetTableProps = {\n  column: 'checkbox',\n  widget: {\n    type: 'CHECKBOX',\n    colorCell: {\n      column: 'checkbox',\n      row: 1,\n      backgroundColor: 'orange',\n      color: 'white',\n      printColor: () => {\n        return true;\n      }\n    }\n  }\n};\n\nexport const editWidget: IVWidgetTableProps = {\n  column: 'name',\n  row: 1,\n  widget: {\n    type: 'EDIT',\n    colorCell: {\n      column: 'name',\n      row: 1,\n      backgroundColor: 'orange',\n      color: 'white',\n      printColor: () => {\n        return true;\n      }\n    }\n  }\n};\n\nexport const datetimeWidget: IVWidgetTableProps = {\n  column: 'fecha',\n  widget: {\n    type: 'DATETIME',\n    dateTimeCell: {\n      icon: 'calendar'\n    },\n    colorCell: {\n      column: 'fecha',\n      backgroundColor: 'orange',\n      color: 'white',\n      printColor: () => {\n        return true;\n      }\n    }\n  }\n};\n\nexport const customerwidget: IVWidgetTableProps = {\n  column: 'customer',\n  widget: {\n    type: 'CUSTOMERCOMPONENT',\n    cusmtomerCell: {\n      renderCustomer: (\n        value: string,\n        infoSelection?: InfoSelection\n      ): ReactNode => {\n        return (\n          <div style={{ textAlign: 'center' }}>\n            <Icon icon={'phone'} iconSize={15} intent={'success'} /> {value}{' '}\n            adjgndkgfjnkdgndksjgnfksdjgnfksdjngfksjdngfkjsdngfksjd\n          </div>\n        );\n      },\n      width: '100%'\n    },\n    colorCell: {\n      row: 1,\n      backgroundColor: 'orange',\n      color: 'white',\n      printColor: () => {\n        return true;\n      }\n    }\n  }\n};\nexport const renderCustomer = (value: string): ReactNode => {\n  return (\n    <div>\n      <Icon icon={'phone'} iconSize={15} intent={'success'} /> {value}\n    </div>\n  );\n};\nexport const widgetsCell: IVWidgetTableProps[] = [\n  dropDown,\n  colorWidget,\n  datetimeWidget,\n  checkboxWidget,\n  customerwidget\n];\n\ninterface IProps {}\n\ninterface IState {\n  changeColor: boolean;\n  data: IData[];\n  columns: string[];\n  clearSelection: boolean | undefined;\n  typeSelection: CellSelectionType;\n  filterColumn: boolean;\n}\n\ninterface IData {\n  name: string;\n  dropdown: string | number;\n  other: string;\n  fecha: string;\n  checkbox: boolean;\n  color: any;\n  sinEditar: string;\n  customer: string;\n}\n\nclass VTableWithWidgetDoc extends Component<IProps, IState> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      changeColor: false,\n      data: this.getData(),\n      columns: [\n        'name',\n        'dropdown',\n        'other',\n        'fecha',\n        'checkbox',\n        'customer',\n        'color',\n        'sinEditar'\n      ],\n      clearSelection: undefined,\n      typeSelection: 'CELL',\n      filterColumn: false\n    };\n  }\n\n  doSomethingAwesomeWithTheValue = (value: any) => {\n    console.log('change selection', value);\n  };\n\n  handleFilter = (value1: any, value2: string) => {\n    console.log(value1, value2);\n  };\n\n  toggleFilterColumn = () => {\n    this.setState({ filterColumn: !this.state.filterColumn });\n  };\n\n  renderTooltip = (value: any, infoSelection?: InfoSelection) => {\n    if (infoSelection && infoSelection!.columnName === 'name') {\n      return `Creemos que su nombre es  ${value}`;\n    }\n\n    if (infoSelection && infoSelection!.columnName === 'customer') {\n      return (\n        <div style={{ width: 'auto' }}>\n          <ul>\n            <li>\n              Dias de vacaiones {value}eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee{' '}\n            </li>\n            <li>Dias de vacaiones {value}</li>\n            <li>Dias de vacaiones {value}</li>\n            <li>Dias de vacaiones {value}</li>\n            <li>Dias de vacaiones {value}</li>\n            <li>Dias de vacaiones {value}</li>\n            <li>Dias de vacaiones {value}</li>\n            <li>Dias de vacaiones {value}</li>\n            <li>Dias de vacaiones {value}</li>\n            <li>Dias de vacaiones {value}</li>\n            <li>Dias de vacaiones {value}</li>\n            <li>Dias de vacaiones {value}</li>\n            <li>Dias de vacaiones {value}</li>\n            <li>Dias de vacaiones {value}</li>\n            <li>Dias de vacaiones {value}</li>\n            <li>Dias de vacaiones {value}</li>\n            <li>Dias de vacaiones {value}</li>\n            <li>Dias de vacaiones {value}</li>\n          </ul>\n        </div>\n      );\n    }\n\n    if (infoSelection && infoSelection!.columnName === 'fecha') {\n      return (\n        <div>\n          <ul>\n            <li>Dias de vacaiones {value} </li>\n            <li>Dias de vacaiones {value}</li>\n            <li>Dias de vacaiones {value}</li>\n            <li>Dias de vacaiones {value}</li>\n          </ul>\n        </div>\n      );\n    }\n\n    return undefined;\n  };\n\n  render() {\n    // validator example\n    return (\n      <React.Fragment>\n        <div>\n          <VTable\n            striped\n            selectionStyle={{\n              backgroundColor: 'rgba(34, 220, 72, 0.16);',\n              borderColor: 'green',\n              borderRadius: '15'\n            }}\n            allowTableTotals\n            totalsConf={{\n              count: ['name', 'dropdown'],\n              totals: ['color'],\n              average: ['other']\n            }}\n            columnWidths={[200, 125, 150, 200]}\n            onSelectionChange={this.doSomethingAwesomeWithTheValue}\n            actionsSelection={{\n              onSelectionChange: this.doSomethingAwesomeWithTheValue,\n              onSelectionCleaned: (value: any) => {\n                console.log('onSelectionCleaned', value);\n              },\n              clearSelection: this.state.clearSelection,\n              onDoubleClick: (\n                value: any,\n                rowIndex: number,\n                columnIndex: number,\n                columnName: string\n              ) => {\n                console.log(\n                  'doble click',\n                  value,\n                  rowIndex,\n                  columnIndex,\n                  columnName\n                );\n              }\n            }}\n            filterByColumn={{\n              filterable: this.state.filterColumn,\n              handleFilter: this.handleFilter,\n              filterType: 'INPUT'\n            }}\n            edit={{\n              editColumn: {\n                columns: ['name', 'other']\n              },\n              resultDataEdited: 'CELL',\n              onSave: this.onSave,\n              invalidDataMessage: (invalidColumns: string[]) => {\n                showToastNotification({\n                  type: 'danger',\n                  message: `No se puede guardar porq las siguiente columnas tienen datos invalidos: ${invalidColumns.join(\n                    ' , '\n                  )}`,\n                  timeout: 8000\n                });\n              },\n              editToolbar: {\n                textSave: 'Salvar',\n                textCancel: 'Cancelar',\n                iconCancel: 'cross',\n                iconEdit: 'take-action',\n                iconSave: 'share'\n              }\n            }}\n            cellSelectionType={this.state.typeSelection}\n            widgetsCell={widgetsCell}\n            columns={this.state.columns}\n            onOrderColumns={(columns: string[]) => this.setState({ columns })}\n            columns_name={{ name: 'Namesito' }}\n            reordering={true}\n            sortable={{\n              columns: ['name', 'color', 'sinEditar'],\n              onSort: this.onSort,\n              setupsOrden: [\n                {\n                  order: 'ASC',\n                  columnName: 'color',\n                  columnIndex: 0\n                }\n              ]\n            }}\n            data={this.state.data}\n            textAlignColumn={[\n              {\n                columns: 'ALL',\n                textAlign: 'end'\n              },\n              {\n                columns: 'name',\n                textAlign: 'left'\n              }\n            ]}\n            configColumnsHeader={[\n              {\n                column: 'name',\n                textColor: 'white',\n                backgroundColor: '#DB2C6F',\n                textAlign: 'left'\n              },\n              {\n                column: 'fecha',\n                textColor: 'white',\n                backgroundColor: '#634DBF'\n              },\n              {\n                column: 'dropdown',\n                textColor: 'white',\n                backgroundColor: '#D13913'\n              },\n              {\n                column: 'color',\n                textColor: 'white',\n                backgroundColor: '#238C2C',\n                textAlign: 'end'\n              }\n            ]}\n            typeHeightRow={'SHORT'}\n            enableColumnResizing={true}\n            toolbar={\n              <div\n                style={{ width: '100%', height: 50, backgroundColor: 'teal' }}\n              >\n                <Button\n                  minimal\n                  text={'Filter by column'}\n                  icon={'filter'}\n                  onClick={this.toggleFilterColumn}\n                />\n              </div>\n            }\n            footer={\n              <div\n                style={{ width: '100%', height: 50, backgroundColor: 'blue' }}\n              >\n                Toolbar\n              </div>\n            }\n            tooltips={this.renderTooltip}\n          />\n        </div>\n\n        <br />\n        <br />\n        <br />\n        <br />\n        <br />\n        <br />\n        <br />\n        <br />\n\n        <button onClick={this.handleChangeColor}>cambiar color</button>\n        <button onClick={this.changeColumn}>cambiar columnas</button>\n        <button onClick={this.addColumn}>add columnas</button>\n        <button\n          onClick={() => {\n            this.changeData('blue');\n          }}\n        >\n          cambiar datos\n        </button>\n        <br />\n        <span> tipo de seleccion </span>\n        <select onChange={this.handleChangeType}>\n          <option value={'CELL'}>CELL</option>\n          <option value={'FREE'}>FREE</option>\n          <option value={'ENTIRE_ROW'}>ENTIRE_ROW</option>\n          <option value={'DISABLED'}>DISABLED</option>\n        </select>\n        <button\n          onClick={() => {\n            this.handleDeleteSelection(true);\n          }}\n        >\n          {' '}\n          Borrar seleccion\n        </button>\n        <button\n          onClick={() => {\n            this.handleDeleteSelection(false);\n          }}\n        >\n          {' '}\n          habilitar seleccion\n        </button>\n        <br />\n        <br />\n        <VTable\n          columns={['name', 'customer', 'other']}\n          data={[\n            {\n              name: 'name',\n              customer: 'customer',\n              other: 'other'\n            }\n          ]}\n          tooltips={this.renderTooltip}\n          positionTooltips={'left'}\n        />\n      </React.Fragment>\n    );\n  }\n\n  handleChangeType = (e: any) => {\n    console.log(e.target.value);\n    this.setState({\n      typeSelection: e.target.value\n    });\n  };\n\n  onSave = (data: any) => {\n    console.log('datos salvados..', data);\n  };\n  handleChangeColor = () => {\n    if (\n      widgetsCell[1] &&\n      widgetsCell[1].widget &&\n      widgetsCell[1].widget.colorCell\n    ) {\n      widgetsCell[1].widget!.colorCell!.backgroundColor = 'green';\n      this.setState({\n        changeColor: !this.state.changeColor\n      });\n    }\n  };\n\n  onSort = (index: any) => {\n    console.log(index);\n  };\n\n  changeData = (colorFiltered?: string) => {\n    this.setState({\n      data: this.getData(colorFiltered)\n    });\n  };\n\n  changeColumn = () => {\n    this.setState({\n      columns: ['name', 'dropdown', 'other', 'fecha', 'checkbox']\n    });\n  };\n  addColumn = () => {\n    this.setState({\n      columns: ['name', 'dropdown', 'other', 'fecha', 'checkbox', 'sinEditar']\n    });\n  };\n\n  handleDeleteSelection = (clearSelection: boolean) => {\n    this.setState({\n      clearSelection\n    });\n  };\n\n  getData = (colorFiltered?: any): IData[] => {\n    const data = [\n      {\n        name: 'Arturo',\n        dropdown: 1,\n        other: '7',\n        fecha: '10/11/2019',\n        checkbox: false,\n        color: 5,\n        sinEditar: 'another better text',\n        customer: 'passenger'\n      },\n      {\n        name: 'Carlos',\n        dropdown: 2,\n        other: '3',\n        fecha: '12/05/2018',\n        checkbox: false,\n        color: 4,\n        sinEditar: ' some text',\n        customer: 'customer'\n      },\n      {\n        name: 'Manuel',\n        dropdown: 2,\n        other: '5',\n        fecha: '12/05/2018',\n        checkbox: true,\n        color: 3,\n        sinEditar: ' some text',\n        customer: 'customer'\n      },\n      {\n        name: 'Pepe',\n        dropdown: 2,\n        other: '9',\n        fecha: '12/05/2018',\n        checkbox: false,\n        color: 8,\n        sinEditar: ' some text',\n        customer: 'customer'\n      }\n    ];\n\n    return colorFiltered ? data.filter(x => x.color === colorFiltered) : data;\n  };\n}\n\nexport default VTableWithWidgetDoc;\n"],"sourceRoot":""}